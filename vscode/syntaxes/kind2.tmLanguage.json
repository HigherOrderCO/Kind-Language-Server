{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Kind2",
  "patterns": [
    {
      "include": "#use-alias"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#doc-comments"
    },
    {
      "include": "#symbols"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#decimal-literal"
    },
    {
      "include": "#top-level"
    },
    {
      "include": "#function"
    },
    {
      "include": "#rule"
    },
    {
      "include": "#stmt"
    },
    {
      "include": "#if-expr"
    },
    {
      "include": "#expr"
    }
  ],
  "repository": {
    "stmt": {
      "patterns": [
        {
          "include": "#open-stmt"
        },
        {
          "include": "#ask-stmt"
        },
        {
          "include": "#do-stmt"
        },
        {
          "include": "#let-stmt"
        },
        {
          "include": "#return-stmt"
        }
      ]
    },
    "type-expr": {
      "patterns": [
        {
          "include": "#if-expr"
        },
        {
          "include": "#else-expr"
        },
        {
          "include": "#match-expr"
        },
        {
          "include": "#type-constructor"
        },
        {
          "include": "#name"
        },
        {
          "include": "#decimal-literal"
        },
        {
          "include": "#symbols"
        },
        {
          "include": "#lam-expr"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "expr": {
      "patterns": [
        {
          "include": "#if-expr"
        },
        {
          "include": "#else-expr"
        },
        {
          "include": "#match-expr"
        },
        {
          "include": "#constructor"
        },
        {
          "include": "#name"
        },
        {
          "include": "#decimal-literal"
        },
        {
          "include": "#symbols"
        },
        {
          "include": "#lam-expr"
        },
        {
          "include": "#strings"
        }
      ]
    },

    "open-stmt": {
      "match": "\\b(open)\\s*(\\b[^\\s]+)\\s*(\\b[^\\s]+)\n",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "entity.name.type"
        },
        "3": {
          "name": "variable.name"
        }
      }
    },
    "return-stmt": {
      "match": "\\b(return)\\s*(.+)",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "patterns": [{ "include": "#expr" }]
        }
      }
    },
    "let-stmt": {
      "match": "\\b(let)\\s*([^\\s]+)\\s*=\\s*([^\\s]+)\\s*",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "variable.name"
        },
        "3": {
          "patterns": [{ "include": "#expr" }]
        }
      }
    },
    "ask-stmt": {
      "match": "\\b(ask)\\s*([^\\s]+)\\s*=\\s*([^\\s]+)\\s*",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "variable.name"
        },
        "3": {
          "patterns": [{ "include": "#expr" }]
        }
      }
    },
    "do-stmt": {
      "name": "keyword.control",
      "match": "\\b(do)\\s*([^\\s]+)\\s*{",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "entity.name.type"
        }
      }
    },

    "match-expr": {
      "match": "\\b(match)\\s*(\\b[^\\s]+)\\s*(\\b[^\\s]+)\\s*(=(?:.+))?{",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "entity.name.type"
        },
        "3": {
          "name": "variable.name"
        },
        "4": {
          "patterns": [
            {
              "include": "#expr"
            }
          ]
        }
      }
    },
    "if-expr": {
      "begin": "\\b(if)\\s*(.+)\\s*{",
      "while": "\\s*\n\\s*(.+)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "patterns": [
            {
              "include": "#expr"
            }
          ]
        }
      },
      "whileCaptures": {
        "1": {
          "patterns": [{ "include": "#stmt" }, { "include": "#expr" }]
        }
      }
    },
    "else-expr": {
      "begin": "\\s*}\\s*\\b(else)\\s*{",
      "while": "\\s*\n\\s*(.+)",
      "end": "\\s*}\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control"
        }
      },
      "whileCaptures": {
        "1": {
          "patterns": [{ "include": "#stmt" }, { "include": "#expr" }]
        }
      }
    },
    "lam-expr": {
      "begin": "\\(\\s*(.+)\\)\\s*=>\\s*",
      "while": "\\s*\n\\s*(.+)",
      "end": "\\s*",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "match": "(\\b[^:\\s]+\\b\\s*):",
              "captures": {
                "1": {
                  "name": "variable.parameter"
                }
              }
            },
            {
              "include": "#type-expr"
            }
          ]
        }
      },
      "whileCaptures": {
        "1": {
          "patterns": [{ "include": "#expr" }, { "include": "#stmt" }]
        }
      }
    },
    "constructor": {
      "match": "[A-Z_][a-z_/.0-9]*",
      "name": "entity.name.function"
    },
    "type-constructor": {
      "patterns": [
        {
          "match": "\\b(Monad|Map|Unit|Maybe|List|JSON|IO|Equal|Pair|Not|String|Variadic|Empty|Either|Dynamic|Decidable|Char|Bit|Bits|Show|Sigma|U60|U120|U240|F60|F64|Type|Nat|Bool)\\b",
          "name": "entity.name.tag"
        },
        {
          "match": "[A-Z_][a-z_/.0-9]*",
          "name": "entity.name.type"
        }
      ]
    },
    "name": {
      "match": "[a-z_^./][a-z_^./0-9]*",
      "name": "variable.name"
    },

    "top-level": {
      "begin": "\\b(type)\\s+(\\b[^\\s]+\\b)\\s*((<\\b[^\\s]+(\\:\\s*\\b[^\\s]+)?>\\s*)*)?(((?:~\\s*)?\\(\\b[^\\s]+(\\:\\s*\\b[^\\s]+)?\\)\\s*)*)?\\s*\\{",
      "end": "}",
      "beginCaptures": {
        "1": {
          "name": "storage.type.class"
        },
        "2": {
          "name": "entity.name.type.class"
        },
        "3": {
          "name": "keyword.control"
        },
        "6": {
          "patterns": [
            {
              "match": "[A-Z_][a-z_/.0-9]*",
              "name": "entity.name.tag"
            },
            {
              "match": "[a-z_^./][a-z_^./0-9]*",
              "name": "variable.name"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#attributes"
        },
        {
          "include": "#doc-comments"
        },
        {
          "include": "#function"
        }
      ]
    },
    "rule": {
      "begin": "(?:(\\b[^\\s]+\\b)\\s*([^=]+)\\s*=){n}",
      "while": "\\s*\n\\s*(.+)",
      "end": "\n",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "entity.name.type",
          "patterns": [
            {
              "match": "\\((\\b[^\\s]+\\b)(.+)\\)",
              "name": "variable.parameter",
              "captures": {
                "1": {
                  "name": "entity.name.type"
                },
                "2": {
                  "name": "variable.parameter"
                }
              }
            },
            {
              "match": "[a-z_^./]+",
              "name": "variable.parameter"
            }
          ]
        }
      },
      "whileCaptures": {
        "1": {
          "patterns": [{ "include": "#stmt" }, { "include": "#expr" }]
        }
      }
    },
    "function": {
      "match": "(\\b[^\\s]+\\b)\\s*((<\\b[^\\s]+(\\:\\s*\\b[^\\s]+)?>\\s*)*)?\\s*(\\(.+\\))?\\s*:(.+)",
      "captures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "keyword.control"
        },
        "5": {
          "patterns": [
            {
              "match": "(\\b[^:\\s]+\\b\\s*):",
              "captures": {
                "1": {
                  "name": "variable.parameter"
                }
              }
            },
            {
              "include": "#type-expr"
            }
          ]
        },
        "6": {
          "name": "entity.name.type",
          "patterns": [
            {
              "include": "#type-expr"
            }
          ]
        },
        "8": {
          "name": "entity.name.type"
        }
      },
      "name": "entity.name.function"
    },
    "use-alias": {
      "begin": "\\b(use)\\s[^\\s]*\\s(as)\\s[^\\s]*\\b",
      "name": "meta.import",
      "beginCaptures": {
        "1": {
          "name": "storage.type.import"
        },
        "2": {
          "name": "storage.type.import"
        }
      },
      "end": "\n"
    },

    "symbols": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "<.|=|>=|===|==|->|=>|=|\\!==|\\!=|\\+=|\\+\\+|\\+|-=|--|-|\\*=|\\*|/=|/|%=|%|!|\\&\\&|\\&|\\|\\||\\|.."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "match": "//.*$"
        }
      ]
    },
    "doc-comments": {
      "patterns": [
        {
          "name": "comment.block.documentation",
          "match": "//!.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(if|then|else|return|do|ask|let|specialize|in|into|match|with|constructor)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.kind2",
          "match": "\\\\."
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "name": "variable.language",
          "match": "(?<!\\w)#[\\w\\.]+\\b(?!:)"
        }
      ]
    },
    "decimal-literal": {
      "match": "\\b\\d[\\d_]*(\\.[\\d_]+)?((e|E)\\d+)?(L|F|f)?\\b",
      "name": "constant.numeric"
    }
  },
  "scopeName": "Main.kind2"
}
